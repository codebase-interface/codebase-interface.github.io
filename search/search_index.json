{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Codebase Interface","text":""},{"location":"#principles","title":"Principles","text":"<ol> <li>Identify and empathise with all audience perspectives on the codebase - contributors, users, operators, AI agents, Build agents.</li> <li>Provide specific interfaces for each audience perspective.</li> <li>Ensure each audience interface is clean and remains maintainable.</li> <li>Provide a consistent abstraction over languages and frameworks.</li> <li>Provide a codebase experience that can be replicated by any audience, anywhere and on any platform.</li> <li>Do not be constrained by current technology and tools - provoke change to how we would like to interact with codebases over current constraints.</li> <li>Utilise cross platform and cross IDE tools and technologies to provide the interfaces.</li> <li>Empathise with your own future self who could become any of the audience perspectives at any time.</li> </ol>"},{"location":"#benefits","title":"Benefits","text":"<p>Benefits can be broken down per codebase audience type as they have been defined up-front. This is a benefit in itself as it allows to be considerate and then specific about the needs of each audience.</p>"},{"location":"#users","title":"Users","text":"<ul> <li>Users expect to interact with the codebase via a specific entry point that is the README.</li> <li>Users get a consistent experience across codebases and have expectations that can either be met or missed.</li> <li>Users understanding when expectations are missed promotes feedback and improvement.</li> <li>Users should be able to interact with the service based on the good user interface provided by the codebase.</li> </ul>"},{"location":"#contributors","title":"Contributors","text":"<ul> <li>Contributors expect to interact with the codebase via a specific entry point that is the README.</li> <li>Contributors get a consistent experience across codebases and have expectations that can either be met or missed.</li> <li>Contributors understanding when expectations are missed promotes feedback and improvement.</li> <li>Contributors should be able to make changes to the code base based on the good contributor interface provided by the codebase.</li> </ul>"},{"location":"#operators","title":"Operators","text":""},{"location":"#ai-agents","title":"AI Agents","text":""},{"location":"#build-agents","title":"Build Agents","text":""}]}